while(i<=9){
while(j<=9)
print(paste(i,"x",j,"=",i*j))
j=j+1
i=i+1
j=1
}
i=2
j=1
while(i<=9){
while(j<=9){
print(paste(i,"x",j,"=",i*j))
j=j+1
}
i=i+1
j=1
}
i=2
j=1
while(i<=9){
while(j<=9){
print(paste(i,"x",j,"=",i*j))
j=j+1
}
i=i+1
j=1
}
sum(c(1, 2, 3, NA))
sum(c(1, 2, 3, NA), na.rm =T)
testpn=function(x){
if(x > 0){
print("Positive number")
}
else{
print("negative number")
}
}
testpn(3)
test(-1)
testpn=function(x){
if(x > 0){
print("Positive number")
}
else{
print("negative number")
}
}
testpn(3)
test(-1)
testpn=function(x){
if(x > 0){
print("Positive number")
}
else{
print("negative number")
}
}
testpn(3)
test(-1)
testpn=function(x){
if(x > 0){
print("Positive number")
}
else{
print("negative number")
}
}
testpn(3)
test(-1)
testpn=function(x){
if(x > 0){
print("Positive number")
}
else{
print("negative number")
}
}
testpn(3)
testpn(-1)
multinum=function(x){
for(i in x:9){
for(j in 1:9){
print(paste(i,"x",j,i*j))
}
}
}
multinum(3)
multinum=function(x){
for(i in 1:9){
print(paste(x,"x",j,i*j))
}
}
multinum(3)
multinum=function(x){
for(i in 1:9){
print(paste(x,"x",i,x*i))
}
}
multinum(3)
multinum=function(x){
for(i in 1:9){
print(paste(x,"x",i,"=",x*i))
}
}
multinum(3)
fibo <- function (n) {
if (n == 1 || n == 2) {
return (1)
}
return(fibo(n - 1) + fibo(n - 2))
}
fibo(5)
fibo(6)
iris
dim(iris)
head(iris)
tail(iris)
str(iris)
head(iris)
str(iris)
head(iris3)
library(help=datasets)
data(mtcars)
setwd("/Users/kyungminahn/Dropbox/KMU/자료처리응용실습")
setwd("C:\jhoney0625")
getwd()
setwd("C:/jhoney0625")
x <- read.csv("a.csv", header = FALSE)
x <- read.csv("a.csv", header = TRUE)
str(x)
x <- read.csv("a.csv", header = TRUE)
str(x)
x
x <- read.csv("b.csv")
x <- read.csv("b.csv")
x
names(x) <- c("id", "name", "score")
str(x)
x
x <- read.csv("c.csv")
x
x <- read.csv("c.csv", na.strings = c("NIL"))
x
is.na(x$score)
# 데이터를 파일로 저장하기
write.csv(x, 'd.csv', row.names = F)
is.na(x$score)
x <- 1:5
y <- 6:10
save(x, y, file="xy.RData")
load("xy.RData")
load("xy.RData")
rm(list=ls())
load("xy.RData")
x <- data.frame(id=c(1, 2), name=c("a", "b"))
x
y <- rbind(x, c(3, "c"))
y
cbind(c(1, 2, 3), c(4, 5, 6)) # cbind() 열을 붙여주는것
y <- cbind(x, greek=c('alpha', 'beta'))
y
str(y)
sum(1:10)
d <- matrix(1:9, ncol= 3)
apply(d, 1, sum)
apply(d, 2, sum)
head(iris)
apply(iris[, 1:4], 2, sum)
colSums(iris[, 1:4])
rowSums(iris[, 1:4])
split(iris, iris$Species)
subset(iris, Species == "setosa")
subset(iris, Species == "setosa" & Sepal.Length > 5.0)
subset(iris, select=c(Sepal.Length, Species))
subset(iris, select=-c(Sepal.Length, Species))
x <- c(20, 11, 33, 50, 47)
sort(x)
sort(x, decreasing=TRUE)
order(x)
order(-x)
x[order(x)]
order(-x)
methods("plot")
install.packages("mlbench")
library ( mlbench )
install.packages("mlbench")
library ( mlbench )
sessionInfo()
install.packages("mlbench")
install.packages("mlbench")
library ( mlbench )
for(i in -9:9){
if(i<0){
print("음수입니다.")
}
else{
for(j in 1:9){
print(paste(i,"x",j,"=i*j"))
}
}
for(i in -9:9){
if(i<0){
print("음수입니다.")
}
else{
for(j in 1:9){
print(paste(i,"x",j,"=i*j"))
}
}
for(i in -9:9){
if(i<0){
print("음수입니다.")
}
else{
for(j in 1:9){
print(paste(i,"x",j,"=i*j"))
}
}
for(i in 2:9){
for(j in 1:9){
print(paste(i,"x",j,"=",i*j))
}
}
for(i in 2:9){
for(j in 1:9){
print(paste(i,"x",j,"=",i*j))
}
}
## 짝수 몇개인지 구하는 코드
x <- c(2,5,3,9,8,11,6)
count <- 0
for (val in x) {
if(val %% 2 == 0)  count = count+1
}
print(count)
x <- -3
if(x > 0){
print("Positive number")
}
for(i in -9:9){
if(i<0){
print("음수입니다.")
}
else{
for(j in 1:9){
print(paste(i,"x",j,"=i*j"))
}
}
}
# 일반적인 그룹별 연산을 위한 함수
aggregate(Sepal.Width ~ Species, iris, mean)
rnorm (100 , 0, 10) # 균일분포의 랜덤 넘버
rnorm (1 , 0, 10) # 정규분포의 랜덤 넘버
plot(density(rnorm(1000000, 0, 10)))
dpois(3, 1)
rnorm (1 , 0, 10) # 정규분포의 랜덤 넘버
plot(density(rnorm(1000000, 0, 10)))
plot(density(runif(1000000, 0, 10)))
set.seed(1)
x=rnorm(100,0,10)
x
x=rnorm(100,0,10)
x
set.seed(1)
x=rnorm(10,0,10)
x
set.seed(1)
x=rnorm(10,0,10)
x
set.seed(1)
x=rnorm(10,0,10)
x
mean(1:5)
var(1:5)
sum((1:5 - mean(1:5))^2)/(5-1)
fivenum(1:11)
summary(1:11)
fivenum(1:4)
summary(1:4)
fivenum(1:11)
summary(1:11)
fivenum(1:8)
summary(1:8)
sample(1:10, replace = TRUE) # 중복을 줄지 허용하는 경우
#각각에 가중치 (weight)를 줄경우
sample (1:10 , 5, replace =TRUE , prob =1:10)
#각각에 가중치 (weight)를 줄경우
sample (1:10 , 5, replace =TRUE , prob =1:10)
#각각에 가중치 (weight)를 줄경우
sample (1:10 , 5, replace =TRUE , prob =1:10)
#각각에 가중치 (weight)를 줄경우
sample (1:10 , 5, replace =TRUE , prob =1:10)
install.packages("sampling")
library(sampling)
x <- strata(c("Species"), size =c(3, 3, 3), method ="srswor",
data = iris)
x <- rnorm (1000 , mean =10 , sd =1)
qqnorm(x)
qqline(x, lty = 1)
x <- rcauchy (1000)
qqnorm(x)
qqline(x, lty = 1)
x <- rnorm (1000 , mean =10 , sd =1)
qqnorm(x)
qqline(x, lty = 1)
x <- rcauchy (1000)
qqnorm(x)
qqline(x, lty = 1)
var.test(extra ~ group, sleep2) # 2 variances are equal
t.test(extra ~ group, data = sleep2, var.equal = TRUE)
data(cars)
head(cars)
m <- lm(dist ~ speed, cars)
m <- lm(dist ~ speed, cars)
m
summary(m)
plot(m)
rbind(c(1, 2, 3), c(4, 5, 6))
x <- data.frame(id=c(1, 2), name=c("a", "b"))
x
y <- rbind(x, c(3, "c")) # rbind() 행을 붙여주는 것
y
cbind(c(1, 2, 3), c(4, 5, 6)) # cbind() 열을 붙여주는것
y <- cbind(x, greek=c('alpha', 'beta'))
y
str(y)
sum(1:10)
d <- matrix(1:9, ncol= 3)
apply(d, 1, sum)
apply(d, 2, sum)
d
head(iris)
apply(iris[, 1:4], 2, sum)
colSums(iris[, 1:4])
rowSums(iris[, 1:4])
head(iris)
apply(iris[, 1:4], 2, sum)
colSums(iris[, 1:4])
rowSums(iris[, 1:4])
subset(iris, Species == "setosa")
rbind(c(1, 2, 3), c(4, 5, 6))
x <- data.frame(id=c(1, 2), name=c("a", "b"))
x
y <- rbind(x, c(3, "c")) # rbind() 행을 붙여주는 것
y
cbind(c(1, 2, 3), c(4, 5, 6)) # cbind() 열을 붙여주는것
cbind(c(1, 2, 3), c(4, 5, 6)) # cbind() 열을 붙여주는것
y <- cbind(x, greek=c('alpha', 'beta'))
y
str(y)
sum(1:10)
d <- matrix(1:9, ncol= 3)
d
apply(d, 1, sum)
apply(d, 2, sum)
head(iris)
apply(iris[, 1:4], 2, sum)
colSums(iris[, 1:4])
rowSums(iris[, 1:4])
split(iris, iris$Species)
subset(iris, Species == "setosa")
subset(iris, Species == "setosa" & Sepal.Length > 5.0)
subset(iris, select=c(Sepal.Length, Species))
subset(iris, select=-c(Sepal.Length, Species))
x <- data.frame(name=c("a", "b", "c"), math=c(1, 2, 3))
y <- data.frame(name=c("c", "b", "a"), english=c(4, 5, 6))
merge(x, y)
cbind(x, y)
x <- c(20, 11, 33, 50, 47)
sort(x)
sort(x, decreasing=TRUE)
order(x)
x[order(x)]
order(-x)
head(iris[order(iris$Sepal.Length), ])
head(iris[order(iris$Sepal.Length , iris$Petal.Length), ])
print(mean(iris$Sepal.Length))
print(mean(iris$Sepal.Width))
x <- c(20, 11, 33, 50, 47)
sort(x)
sort(x, decreasing=TRUE)
order(x)
x[order(x)]
order(-x)
head(iris[order(iris$Sepal.Length), ])
head(iris[order(iris$Sepal.Length , iris$Petal.Length), ])
print(mean(iris$Sepal.Length))
print(mean(iris$Sepal.Width))
with(iris, c(mean(Sepal.Length),  mean(Sepal.Width)))
x <- data.frame(val=c(1, 2, 3, 4, NA, 5, NA))
x
x <- within(x, { val <- ifelse(is.na(val), median(val, na.rm=TRUE), val) })
x
Sepal.Width
attach(iris)
head(Sepal.Width)
detach(iris)
Sepal.Width
data(iris)
head(iris)
attach(iris)
Sepal.Width
attach(iris)
head(Sepal.Width)
Sepal.Width
attach(iris)
head(Sepal.Width)
x <- c(2, 4, 6, 7, 10)
x %% 2
which(x %%2 ==0)
x[which(x %% 2 == 0)]
which.min(x)
x[which.min(x)]
which.max(x)
x[which.max(x)]
library(help=datasets)
data(USArrests)
data
head(USArrests)
#2
Rape=c(1,2,3,4,5,6)
order(Rape)
Rape[order(Rape)]
#2
Rape=c(1,2,3,4,5,6)
order(-Rape)
Rape[order(Rape)]
#2
Rape=c(1,2,3,4,5,6)
order(-Rape)
Rape[order(-Rape)]
#2
Rape=c(112,21,32,4,55,61)
order(-Rape)
Rape[order(-Rape)]
#3
murder= c(1,2,3,11,12,34,7)
which(muder>10)
#3
murder= c(1,2,3,11,12,34,7)
which(murder>10)
muder[which(murder>10)]
#3
murder= c(1,2,3,11,12,34,7)
which(murder>10)
murder[which(murder>10)]
murder
write.csv(murder[which(murder>10)], 'abc.csv', row.names = F)
data ( Ozone )
install.packages("mlbench")
library ( mlbench )
data ( Ozone )
plot ( Ozone $V8 , Ozone $V9)
data
Ozone
Rape
murder
data(Rape)
data(UrbanPop)
plot ( UrbanPop,Murder)
plot ( UrbanPop,Murder)
data(UrbanPop)
#5
library(help=datasets)
data(UrbanPop)
data(USArrests)
USArrests
plot(USArrests$UrbanPop,USArrests$Murder)
plot ( USArrests $UrbanPop , USArrests $Murder , xlab ="Urban Population", ylab ="Murder")
plot ( USArrests $UrbanPop , USArrests $Murder , xlab ="Urban Population", ylab ="Murder",main = US Arrests)
plot ( USArrests $UrbanPop , USArrests $Murder , xlab ="Urban Population", ylab ="Murder",main = "US Arrests")
plot(USArrests$UrbanPop,USArrests$Murder)
plot(USArrests$UrbanPop,USArrests$Murder,xlab = "Urban Population", ylab = "Murder")
plot(USArrests$UrbanPop,USArrests$Rape)
plot(USArrests$UrbanPop,USArrests$Rape,xlab = "Urban Population", ylab = "Rape")
r
plot(USArrests$UrbanPop,USArrests$Rape,xlab = "Urban Population", ylab = "Rape")
plot(USArrests$UrbanPop,USArrests$Rape,xlab = "Urban Population", ylab = "Rape", main="Rape")
plot(USArrests$UrbanPop,USArrests$Murder,xlab = "Urban Population", ylab = "Murder",main = "Murder")
opar <- par( mfrow =c(1, 2))
plot ( Ozone $V8 , Ozone $V9 , xlab =" Sandburg Temperature ",
ylab ="El Monte Temperature ", main =" Ozone ")
plot ( Ozone $V8 , Ozone $V9 , xlab =" Sandburg Temperature ",
ylab ="El Monte Temperature ", main =" Ozone2 ")
par(opar)
opar <- par( mfrow =c(1, 2))
plot(USArrests$UrbanPop,USArrests$Murder,xlab = "Urban Population", ylab = "Murder",main = "Murder")
plot(USArrests$UrbanPop,USArrests$Rape,xlab = "Urban Population", ylab = "Rape", main="Rape")
par(opar)
par( mfrow =c(1, 2)) # 행렬
plot(USArrests$UrbanPop,USArrests$Murder,xlab = "Urban Population", ylab = "Murder",main = "Murder")
plot(USArrests$UrbanPop,USArrests$Rape,xlab = "Urban Population", ylab = "Rape", main="Rape")
# Helper packages
library(dplyr)    # for data manipulation
library(ggplot2)  # for awesome graphics
# Modeling packages
library(caret)    # for cross-validation, etc.
# Model interpretability packages
library(vip)      # variable importance
(model2 <- lm(Sale_Price ~ Gr_Liv_Area + Year_Built, data = ames_train))
# Create training  feature matrices
# we use model.matrix(...)[, -1] to discard the intercept
X <- model.matrix(Sale_Price ~ ., ames_train)[, -1]
# transform y with log transformation
Y <- log(ames_train$Sale_Price)
# Apply ridge regression to ames data
ridge <- glmnet(
x = X,
y = Y,
alpha = 0
)
plot(ridge, xvar = "lambda")
